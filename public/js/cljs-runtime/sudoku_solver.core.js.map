{"version":3,"sources":["sudoku_solver/core.cljs"],"mappings":"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","names":["js/sudoku-solver","js/sudoku-solver.core","js/sudoku-solver.core.game-state","sudoku-solver.core/game-state","cljs.core.atom","cljs.core/vec","cljs.core.repeat","sudoku-solver.core/get-cell-value","row","col","cljs.core/deref","cljs.core.get_in","sudoku-solver.core/get-initial-value","sudoku-solver.core/is-initial-cell?","sudoku-solver.core/cell-selected?","cljs.core._EQ_","sudoku-solver.core/get-row","board","cljs.core.get","sudoku-solver.core/get-column","p1__14353#","cljs.core.mapv","sudoku-solver.core/get-box","box-row","cljs.core/quot","box-col","iter__5523__auto__","s__14355","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","xs__6360__auto__","cljs.core/first","iterys__5519__auto__","s__14357","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__14359","cljs.core/chunk-buffer","i__14358","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__14356","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","fs__5520__auto__","cljs.core.concat","iter__14354","r","cljs.core.range","c","sudoku-solver.core/has-duplicate?","values","target-value","target-pos","filtered-values","cljs.core.map_indexed","idx","val","cljs.core.not_EQ_","non-zero-values","p1__14360#","cljs.core.filter","and__5043__auto__","p1__14361#","cljs.core/some","sudoku-solver.core/is-valid-move?","value","row-values","col-values","box-values","box-pos","cljs.core/mod","cljs.core/not","or__5045__auto__","sudoku-solver.core/find-empty-cell","s__14363","s__14365","b__14367","i__14366","iter__14364","iter__14362","sudoku-solver.core/solve-sudoku","temp__5802__auto__","empty-pos","vec__14368","cljs.core.nth","num","new-board","cljs.core/assoc-in","result","sudoku-solver.core/get-cell-class","selected?","initial?","valid?","sudoku-solver.core/create-cell","cell-class","sudoku-solver.core/create-row","row-index","cljs.core.apply","cljs.core/str","p1__14371#","cljs.core.map","sudoku-solver.core/create-board","sudoku-solver.core/create-controls","sudoku-solver.core/render-board!","board-element","js/document","sudoku-solver.core/set-cell-value!","cljs.core.swap_BANG_","sudoku-solver.core/clear-cell!","sudoku-solver.core/select-cell!","cljs.core/assoc","sudoku-solver.core/solve-puzzle!","current-board","solution","js/alert","sudoku-solver.core/clear-board!","sudoku-solver.core/move-selection","direction","selected","vec__14372","vec__14375","new-row","new-col","G__14378","cljs.core/Keyword","js/Error","x__5130__auto__","y__5131__auto__","x__5133__auto__","y__5134__auto__","sudoku-solver.core/handle-keypress","event","key","vec__14379","cljs.core/re-matches","number","js/parseInt","js/window","sudoku-solver.core/init!","app-element","cljs.core/chunk-first"],"sourcesContent":["(ns sudoku-solver.core)\n\n;; Estado do jogo\n(defonce game-state \n  (atom {:board (vec (repeat 9 (vec (repeat 9 0))))\n         :initial-board (vec (repeat 9 (vec (repeat 9 0))))  ; N\u00fameros colocados pelo usu\u00e1rio\n         :selected-cell nil\n         :solving false}))\n\n;; Declara\u00e7\u00e3o antecipada\n(declare render-board!)\n\n(defn get-cell-value [row col]\n  (get-in @game-state [:board row col]))\n\n(defn get-initial-value [row col]\n  (get-in @game-state [:initial-board row col]))\n\n(defn is-initial-cell? [row col]\n  (pos? (get-initial-value row col)))\n\n(defn cell-selected? [row col]\n  (= (:selected-cell @game-state) [row col]))\n\n;; Fun\u00e7\u00f5es de valida\u00e7\u00e3o do Sudoku\n(defn get-row [board row]\n  (get board row))\n\n(defn get-column [board col]\n  (mapv #(get % col) board))\n\n(defn get-box [board row col]\n  (let [box-row (* 3 (quot row 3))\n        box-col (* 3 (quot col 3))]\n    (for [r (range box-row (+ box-row 3))\n          c (range box-col (+ box-col 3))]\n      (get-in board [r c]))))\n\n(defn has-duplicate?\n  \"Verifica se h\u00e1 duplicata do target-value, ignorando a posi\u00e7\u00e3o target-pos\"\n  [values target-value target-pos]\n  (let [filtered-values (map-indexed \n                          (fn [idx val] \n                            (when (not= idx target-pos) val)) \n                          values)\n        non-zero-values (filter #(and % (pos? %)) filtered-values)]\n    (some #(= % target-value) non-zero-values)))\n\n(defn is-valid-move?\n  \"Verifica se colocar 'value' na posi\u00e7\u00e3o [row col] \u00e9 v\u00e1lido\"\n  [board row col value]\n  (if (zero? value)\n    true  ; Sempre pode apagar\n    (let [row-values (get-row board row)\n          col-values (get-column board col)\n          box-values (vec (get-box board row col))\n          box-pos (+ (* 3 (mod row 3)) (mod col 3))]\n      (not (or (has-duplicate? row-values value col)\n               (has-duplicate? col-values value row)\n               (has-duplicate? box-values value box-pos))))))\n\n;; Algoritmo de resolu\u00e7\u00e3o (Backtracking)\n(defn find-empty-cell\n  \"Encontra a primeira c\u00e9lula vazia (retorna [row col] ou nil)\"\n  [board]\n  (first (for [row (range 9)\n               col (range 9)\n               :when (zero? (get-in board [row col]))]\n           [row col])))\n\n(defn solve-sudoku\n  \"Resolve o Sudoku usando backtracking. Retorna board resolvido ou nil se imposs\u00edvel\"\n  [board]\n  (if-let [empty-pos (find-empty-cell board)]\n    (let [[row col] empty-pos]\n      (loop [num 1]\n        (if (<= num 9)\n          (if (is-valid-move? board row col num)\n            (let [new-board (assoc-in board [row col] num)\n                  result (solve-sudoku new-board)]\n              (if result\n                result  ; Solu\u00e7\u00e3o encontrada\n                (recur (inc num))))  ; Tenta pr\u00f3ximo n\u00famero\n            (recur (inc num)))  ; N\u00famero inv\u00e1lido, tenta pr\u00f3ximo\n          nil)))  ; Nenhum n\u00famero funcionou\n    board))  ; N\u00e3o h\u00e1 c\u00e9lulas vazias, puzzle resolvido\n\n(defn get-cell-class [row col]\n  (let [value (get-cell-value row col)\n        selected? (cell-selected? row col)\n        initial? (is-initial-cell? row col)\n        board (:board @game-state)\n        valid? (is-valid-move? board row col value)]\n    (cond\n      selected? \"cell selected\"  ; Sempre mostra sele\u00e7\u00e3o por cima\n      (and (pos? value) (not valid?)) \"cell invalid\"\n      initial? \"cell initial\"  ; N\u00fameros colocados pelo usu\u00e1rio (verde)\n      (pos? value) \"cell solved\"  ; N\u00fameros resolvidos pelo algoritmo (azul)\n      :else \"cell\")))\n\n(defn create-cell [row col]\n  (let [value (get-cell-value row col)\n        cell-class (get-cell-class row col)]\n    (str \"<div class='\" cell-class \"' \"\n         \"data-row='\" row \"' data-col='\" col \"' \"\n         \"onclick='selectCell(\" row \",\" col \")'>\"\n         (if (pos? value) value \"\")\n         \"</div>\")))\n\n(defn create-row [row-index]\n  (str \"<div class='row'>\"\n       (apply str (map #(create-cell row-index %) (range 9)))\n       \"</div>\"))\n\n(defn create-board []\n  (str \"<div class='board'>\"\n       (apply str (map create-row (range 9)))\n       \"</div>\"))\n\n(defn create-controls []\n  (str \"<div class='controls'>\"\n       \"<button onclick='solvePuzzle()' class='btn btn-solve'>\ud83d\ude80 GO</button>\"\n       \"<button onclick='clearBoard()' class='btn btn-clear'>\ud83d\uddd1\ufe0f Clear</button>\"\n       \"</div>\"))\n\n(defn render-board! []\n  (let [board-element (.getElementById js/document \"sudoku-board\")]\n    (when board-element\n      (set! (.-innerHTML board-element) (create-board)))))\n\n(defn set-cell-value! [row col value]\n  (when (not (:solving @game-state))  ; S\u00f3 permite editar se n\u00e3o estiver resolvendo\n    (swap! game-state assoc-in [:board row col] value)\n    (swap! game-state assoc-in [:initial-board row col] value)  ; Marca como inicial\n    (render-board!)))\n\n(defn clear-cell! [row col]\n  (when (not (:solving @game-state))\n    (swap! game-state assoc-in [:board row col] 0)\n    (swap! game-state assoc-in [:initial-board row col] 0)\n    (render-board!)))\n\n(defn select-cell! [row col]\n  (swap! game-state assoc :selected-cell [row col])\n  (render-board!))\n\n(defn solve-puzzle! []\n  (let [current-board (:board @game-state)\n        solution (solve-sudoku current-board)]\n    (if solution\n      (do\n        (swap! game-state assoc :board solution :solving false)\n        (render-board!)\n        (js/alert \"\u2705 Puzzle resolvido com sucesso!\"))\n      (js/alert \"\u274c Este puzzle n\u00e3o tem solu\u00e7\u00e3o v\u00e1lida!\"))))\n\n(defn clear-board! []\n  (swap! game-state assoc \n         :board (vec (repeat 9 (vec (repeat 9 0))))\n         :initial-board (vec (repeat 9 (vec (repeat 9 0))))\n         :selected-cell nil\n         :solving false)\n  (render-board!))\n\n(defn move-selection \n  \"Move a sele\u00e7\u00e3o na dire\u00e7\u00e3o especificada\"\n  [direction]\n  (let [selected (:selected-cell @game-state)]\n    (when selected\n      (let [[row col] selected\n            [new-row new-col] (case direction\n                                :up [(max 0 (dec row)) col]\n                                :down [(min 8 (inc row)) col]\n                                :left [row (max 0 (dec col))]\n                                :right [row (min 8 (inc col))])]\n        (select-cell! new-row new-col)))))\n\n(defn handle-keypress [event]\n  (let [key (.-key event)\n        selected (:selected-cell @game-state)]\n    (cond\n      ;; Navega\u00e7\u00e3o com setas (sempre funciona)\n      (= key \"ArrowUp\") \n      (do (.preventDefault event) (move-selection :up))\n      \n      (= key \"ArrowDown\") \n      (do (.preventDefault event) (move-selection :down))\n      \n      (= key \"ArrowLeft\") \n      (do (.preventDefault event) (move-selection :left))\n      \n      (= key \"ArrowRight\") \n      (do (.preventDefault event) (move-selection :right))\n      \n      ;; Edi\u00e7\u00e3o (s\u00f3 quando n\u00e3o est\u00e1 resolvendo)\n      (and selected (not (:solving @game-state)))\n      (let [[row col] selected]\n        (cond\n          ;; N\u00fameros de 1-9\n          (re-matches #\"[1-9]\" key)\n          (let [number (js/parseInt key)]\n            (set-cell-value! row col number))\n          \n          ;; Apagar c\u00e9lula (Delete, Backspace ou 0)\n          (or (= key \"Delete\") \n              (= key \"Backspace\") \n              (= key \"0\"))\n          (clear-cell! row col))))))\n\n;; Fun\u00e7\u00f5es globais para serem chamadas pelo HTML\n(set! (.-selectCell js/window) select-cell!)\n(set! (.-solvePuzzle js/window) solve-puzzle!)\n(set! (.-clearBoard js/window) clear-board!)\n\n(defn init! []\n  (let [app-element (.getElementById js/document \"app\")]\n    (set! (.-innerHTML app-element) \n          (str \"<h1>\ud83c\udfaf Sudoku Solver</h1>\"\n               \"<div id='sudoku-board'>\" (create-board) \"</div>\"\n               (create-controls)\n               \"<p class='instructions'>Use setas para navegar | Digite 1-9 | Delete/Backspace/0 para apagar | GO para resolver</p>\"))\n    \n    ;; Selecionar c\u00e9lula inicial (centro do grid)\n    (select-cell! 4 4)\n    \n    ;; Adicionar listener para teclado\n    (.addEventListener js/document \"keydown\" handle-keypress)))\n"]}